// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: account.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const checkEmailExists = `-- name: CheckEmailExists :one
SELECT COUNT(*) > 0 AS exists
FROM users
WHERE email = $1
`

// Check if only email exists (for OAuth)
func (q *Queries) CheckEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkEmailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkUsernameOrEmailExists = `-- name: CheckUsernameOrEmailExists :one
SELECT COUNT(*) > 0 AS exists
FROM users
WHERE username = $1 OR email = $2
`

type CheckUsernameOrEmailExistsParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

// Check if username or email exists
func (q *Queries) CheckUsernameOrEmailExists(ctx context.Context, arg CheckUsernameOrEmailExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUsernameOrEmailExists, arg.Username, arg.Email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (user_id, name, description, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING id, user_id, name, description, created_at, updated_at
`

type CreateGroupParams struct {
	UserID      int32          `json:"user_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup, arg.UserID, arg.Name, arg.Description)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOAuthUser = `-- name: CreateOAuthUser :one
INSERT INTO users (username, email, oauth_provider, oauth_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
ON CONFLICT (email) 
DO UPDATE SET username = EXCLUDED.username, updated_at = NOW()
RETURNING id, username, email, oauth_provider, oauth_id, created_at, updated_at
`

type CreateOAuthUserParams struct {
	Username      string         `json:"username"`
	Email         string         `json:"email"`
	OauthProvider sql.NullString `json:"oauth_provider"`
	OauthID       sql.NullString `json:"oauth_id"`
}

type CreateOAuthUserRow struct {
	ID            int32          `json:"id"`
	Username      string         `json:"username"`
	Email         string         `json:"email"`
	OauthProvider sql.NullString `json:"oauth_provider"`
	OauthID       sql.NullString `json:"oauth_id"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
}

// Register a new OAuth user (if they don't exist, update username if needed)
func (q *Queries) CreateOAuthUser(ctx context.Context, arg CreateOAuthUserParams) (CreateOAuthUserRow, error) {
	row := q.db.QueryRowContext(ctx, createOAuthUser,
		arg.Username,
		arg.Email,
		arg.OauthProvider,
		arg.OauthID,
	)
	var i CreateOAuthUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.OauthProvider,
		&i.OauthID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, expires_at)
VALUES ($1, NOW() + INTERVAL '24 hours')
RETURNING id, user_id, created_at, expires_at
`

// Create a new session with configurable expiration
func (q *Queries) CreateSession(ctx context.Context, userID int32) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, userID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const createUploadJob = `-- name: CreateUploadJob :one
INSERT INTO upload_jobs (id, user_id, platform, video_path, storage_type, file_url, status, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, NOW(), NOW())  
RETURNING id, user_id, platform, video_path, storage_type, file_url, status, created_at, updated_at
`

type CreateUploadJobParams struct {
	ID          string         `json:"id"`
	UserID      int32          `json:"user_id"`
	Platform    sql.NullString `json:"platform"`
	VideoPath   sql.NullString `json:"video_path"`
	StorageType sql.NullString `json:"storage_type"`
	FileUrl     sql.NullString `json:"file_url"`
	Status      sql.NullString `json:"status"`
}

type CreateUploadJobRow struct {
	ID          string         `json:"id"`
	UserID      int32          `json:"user_id"`
	Platform    sql.NullString `json:"platform"`
	VideoPath   sql.NullString `json:"video_path"`
	StorageType sql.NullString `json:"storage_type"`
	FileUrl     sql.NullString `json:"file_url"`
	Status      sql.NullString `json:"status"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
}

// Create a new upload job with platform support
func (q *Queries) CreateUploadJob(ctx context.Context, arg CreateUploadJobParams) (CreateUploadJobRow, error) {
	row := q.db.QueryRowContext(ctx, createUploadJob,
		arg.ID,
		arg.UserID,
		arg.Platform,
		arg.VideoPath,
		arg.StorageType,
		arg.FileUrl,
		arg.Status,
	)
	var i CreateUploadJobRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Platform,
		&i.VideoPath,
		&i.StorageType,
		&i.FileUrl,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserWithPassword = `-- name: CreateUserWithPassword :one
INSERT INTO users (username, email, password_hash, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING id, username, email, created_at, updated_at
`

type CreateUserWithPasswordParams struct {
	Username     string `json:"username"`
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

type CreateUserWithPasswordRow struct {
	ID        int32        `json:"id"`
	Username  string       `json:"username"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

// Register a new user with a password
func (q *Queries) CreateUserWithPassword(ctx context.Context, arg CreateUserWithPasswordParams) (CreateUserWithPasswordRow, error) {
	row := q.db.QueryRowContext(ctx, createUserWithPassword, arg.Username, arg.Email, arg.PasswordHash)
	var i CreateUserWithPasswordRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE id = $1
`

// Delete a session (logout)
func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

// Delete a user
func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getGroupByID = `-- name: GetGroupByID :one
SELECT id, user_id, name, description, created_at, updated_at
FROM groups
WHERE id = $1
`

func (q *Queries) GetGroupByID(ctx context.Context, id int32) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroupByID, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOAuthUserByEmail = `-- name: GetOAuthUserByEmail :one
SELECT id, username, email, oauth_provider, oauth_id, created_at, updated_at
FROM users
WHERE email = $1
`

type GetOAuthUserByEmailRow struct {
	ID            int32          `json:"id"`
	Username      string         `json:"username"`
	Email         string         `json:"email"`
	OauthProvider sql.NullString `json:"oauth_provider"`
	OauthID       sql.NullString `json:"oauth_id"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
}

// Get user by email (for OAuth login)
func (q *Queries) GetOAuthUserByEmail(ctx context.Context, email string) (GetOAuthUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getOAuthUserByEmail, email)
	var i GetOAuthUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.OauthProvider,
		&i.OauthID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, created_at, expires_at 
FROM sessions 
WHERE id = $1
`

// Get session by ID
func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getUploadJob = `-- name: GetUploadJob :one
SELECT id, user_id, platform, video_path, storage_type, file_url, status, created_at, updated_at
FROM upload_jobs
WHERE id = $1
`

type GetUploadJobRow struct {
	ID          string         `json:"id"`
	UserID      int32          `json:"user_id"`
	Platform    sql.NullString `json:"platform"`
	VideoPath   sql.NullString `json:"video_path"`
	StorageType sql.NullString `json:"storage_type"`
	FileUrl     sql.NullString `json:"file_url"`
	Status      sql.NullString `json:"status"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
}

// Get upload job by ID
func (q *Queries) GetUploadJob(ctx context.Context, id string) (GetUploadJobRow, error) {
	row := q.db.QueryRowContext(ctx, getUploadJob, id)
	var i GetUploadJobRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Platform,
		&i.VideoPath,
		&i.StorageType,
		&i.FileUrl,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmailWithPassword = `-- name: GetUserByEmailWithPassword :one
SELECT id, username, email, password_hash, created_at, updated_at
FROM users
WHERE email = $1
`

type GetUserByEmailWithPasswordRow struct {
	ID           int32        `json:"id"`
	Username     string       `json:"username"`
	Email        string       `json:"email"`
	PasswordHash string       `json:"password_hash"`
	CreatedAt    sql.NullTime `json:"created_at"`
	UpdatedAt    sql.NullTime `json:"updated_at"`
}

// Get user by email (for password login)
func (q *Queries) GetUserByEmailWithPassword(ctx context.Context, email string) (GetUserByEmailWithPasswordRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailWithPassword, email)
	var i GetUserByEmailWithPasswordRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, created_at, updated_at
FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID        int32        `json:"id"`
	Username  string       `json:"username"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

// Get user by ID
func (q *Queries) GetUserByID(ctx context.Context, id int32) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertGroupItemIfNotExists = `-- name: InsertGroupItemIfNotExists :execrows
INSERT INTO group_items (group_id, type, data)
VALUES ($1, $2, $3::jsonb)
ON CONFLICT (group_id, type) DO NOTHING
`

type InsertGroupItemIfNotExistsParams struct {
	GroupID int32           `json:"group_id"`
	Type    sql.NullString  `json:"type"`
	Data    json.RawMessage `json:"data"`
}

func (q *Queries) InsertGroupItemIfNotExists(ctx context.Context, arg InsertGroupItemIfNotExistsParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertGroupItemIfNotExists, arg.GroupID, arg.Type, arg.Data)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const listUserUploadJobs = `-- name: ListUserUploadJobs :many
SELECT id, platform, video_path, platform ,storage_type, file_url, status, created_at, updated_at
FROM upload_jobs
WHERE user_id = $1
ORDER BY created_at DESC
`

type ListUserUploadJobsRow struct {
	ID          string         `json:"id"`
	Platform    sql.NullString `json:"platform"`
	VideoPath   sql.NullString `json:"video_path"`
	Platform_2  sql.NullString `json:"platform_2"`
	StorageType sql.NullString `json:"storage_type"`
	FileUrl     sql.NullString `json:"file_url"`
	Status      sql.NullString `json:"status"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
}

// List all upload jobs for a user
func (q *Queries) ListUserUploadJobs(ctx context.Context, userID int32) ([]ListUserUploadJobsRow, error) {
	rows, err := q.db.QueryContext(ctx, listUserUploadJobs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserUploadJobsRow
	for rows.Next() {
		var i ListUserUploadJobsRow
		if err := rows.Scan(
			&i.ID,
			&i.Platform,
			&i.VideoPath,
			&i.Platform_2,
			&i.StorageType,
			&i.FileUrl,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, created_at, updated_at
FROM users
ORDER BY created_at DESC
`

type ListUsersRow struct {
	ID        int32        `json:"id"`
	Username  string       `json:"username"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

// List all users
func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroupItemData = `-- name: UpdateGroupItemData :execrows
UPDATE group_items
SET data = $1::jsonb, updated_at = NOW()
WHERE group_id = $2 AND type = $3
`

type UpdateGroupItemDataParams struct {
	Data    json.RawMessage `json:"data"`
	GroupID int32           `json:"group_id"`
	Type    sql.NullString  `json:"type"`
}

func (q *Queries) UpdateGroupItemData(ctx context.Context, arg UpdateGroupItemDataParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateGroupItemData, arg.Data, arg.GroupID, arg.Type)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateUploadJobFileURL = `-- name: UpdateUploadJobFileURL :exec
UPDATE upload_jobs
SET file_url = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateUploadJobFileURLParams struct {
	ID      string         `json:"id"`
	FileUrl sql.NullString `json:"file_url"`
}

// Update upload job file URL
func (q *Queries) UpdateUploadJobFileURL(ctx context.Context, arg UpdateUploadJobFileURLParams) error {
	_, err := q.db.ExecContext(ctx, updateUploadJobFileURL, arg.ID, arg.FileUrl)
	return err
}

const updateUploadJobStatus = `-- name: UpdateUploadJobStatus :exec
UPDATE upload_jobs
SET status = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateUploadJobStatusParams struct {
	ID     string         `json:"id"`
	Status sql.NullString `json:"status"`
}

// Update upload job status
func (q *Queries) UpdateUploadJobStatus(ctx context.Context, arg UpdateUploadJobStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateUploadJobStatus, arg.ID, arg.Status)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $2,
    email = $3,
    updated_at = NOW()
WHERE id = $1
RETURNING id, username, email, created_at, updated_at
`

type UpdateUserParams struct {
	ID       int32  `json:"id"`
	Username string `json:"username"`
	Email    string `json:"email"`
}

type UpdateUserRow struct {
	ID        int32        `json:"id"`
	Username  string       `json:"username"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

// Update user details
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Username, arg.Email)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
