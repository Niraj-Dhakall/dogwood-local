-- name: CreateUser :one
INSERT INTO users (username, email, password_hash, created_at)
VALUES ($1, $2, $3, NOW())
RETURNING id, username, email, created_at;

-- name: GetUserByID :one
SELECT id, username, email, created_at
FROM users
WHERE id = $1;

-- name: GetUserByEmail :one
SELECT id, username, email, password_hash, created_at
FROM users
WHERE email = $1;

-- name: ListUsers :many
SELECT id, username, email, created_at
FROM users
ORDER BY created_at DESC;

-- name: UpdateUser :one
UPDATE users
SET username = $2,
    email = $3
WHERE id = $1
RETURNING id, username, email, created_at;

-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1;

-- name: CheckUsernameOrEmailExists :one
SELECT COUNT(*) > 0 AS exists
FROM users
WHERE username = $1 OR email = $2;

-- Register a new user with password
-- name: CreateUser :one
INSERT INTO users (username, email, password_hash, created_at)
VALUES ($1, $2, $3, NOW())
RETURNING id, username, email, created_at;

-- Register a new OAuth user (if they don't exist)
-- name: CreateOAuthUser :one
INSERT INTO users (username, email, oauth_provider, oauth_id, avatar_url, created_at)
VALUES ($1, $2, $3, $4, $5, NOW())
ON CONFLICT (email) DO NOTHING
RETURNING id, username, email, oauth_provider, oauth_id, avatar_url, created_at;

-- Get user by email for login
-- name: GetUserByEmail :one
SELECT id, username, email, password_hash, oauth_provider, oauth_id, created_at
FROM users
WHERE email = $1;

-- Check if username or email exists
-- name: CheckUsernameOrEmailExists :one
SELECT COUNT(*) > 0 AS exists
FROM users
WHERE username = $1 OR email = $2;